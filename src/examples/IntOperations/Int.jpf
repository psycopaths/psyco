@using jpf-jdart

shell=gov.nasa.jpf.psyco.tools.RunGenerateInt

target=empty
args=empty

JPF.isModeSymbolic=true

sut.package=IntOperations
sut.class=IntMath
example.path=src/examples/IntOperations

# this function has a problem during refinement. mod with both operands
# symbolic is not supported by Yices - says the constraint is non-linear
# this has to be handled during the sat checks during refinement
#interface.alphabet=gcd:2

# this function has a different problem during refinement. There is a 
# DontKnow in the tree because of a non-linear operation. This causes
# a problem downstream related to simplifying a disjunct. You have an
# expression of the form (a / b) * b, which is non-linear.
interface.alphabet=divide:3

# i am currently running this function
#interface.alphabet=log10:2

# the following methods work
#interface.alphabet=isPowerOfTwo:1,pow:2,mod:2

# outputs results - use tmp because I ignore it during commits 
interface.outputFile=tmp/generatedIntOp

# enable reporting for these loggers
log.info=teacher,learning,refinement,jdart

# following line used to track what JPF executes
#listener=.listener.ExecTracker

# avoid statistics during learning process by enabling the following line
#report.console.finished=result
report.console.property_violation=error

# declare all classes in the component that implement methods in the 
# alphabet
symbolic.classes=IntOperations.IntMath

jdart.optimize=true
